1. you given a array or a positive number and number k, find maxi sum of subarray of size k ;

Sliding Window

int maxiSub(vector<int>&arr){
	
	int  left =0;
	int right = k;
	int sum =0;
	for(int i=0;i<k;i++){
		sum+=arr[i];
	}
	
	int maxi = INT_MIN;
	maxi = max(maxi,sum);
	
	while(right<=n-1){
		sum-=arr[left];
		left++;
		sum+=arr[right];
		maxi = max(maxi,sum);
		right++;
		
	}
	return maxi;
	
}


2.Given a stack reverse the stack;
recusion method;

void insertAtbuttom(stack<int>&st,int topEle){
	if(st.empty()){
		st.push(topEle);
	}
	int top = st.top();
	st.pop();
	insertAtbuttom(st,topEle);
	st.push(top);
}

void revStack(stack<int>&st){

	if(st.empty()){
		return;
	}

	int topEle = st.top();
	st.pop();

	revStac(st);
	insertAtbuttom(st,topEle);	
		
	
}	



3. LONGEST SUBARRAY WITH SUM <= k

expand and srink method…
TC->O(N+N)
SC->O(1)

void lngSub(vector<int>&arr,int k){
	int l=0;
	int r=0;
	int sum =0;
	int maxi = INT_MIN;

	while(r<n){
		sum+=arr[r];

		while(sum>k){
			sum-=arr[l];
			l++;
		}
		if(sum<=k){
			maxi = max(maxi,r-l+1);
 		}
 		
		r++;
	}

	return maxi;
} 


4. MAXIMUN POINT OBTAIN FROM CARD

TC-> O(2 X K)
SC-> O(1)

void maxPoint(vector<int>&point,int k){
	int lsum = 0;
	int rsum=0;
	int maxi = INT_MIN;
	for(int i=0;i<k-1;i++){
		lsum+=arr[i];
	}
	maxi = lsum;
	int right=n-1;
	for(int i=k-1;i>=0;i–){
		lsum-=arr[i];
		rsum +=arr[right];
		int total = lsum+rsum;
 		maxi = max(maxi,total);
		right–;
	}

	retunr maxi;

}



5. Find longest substring which can have no more than k distinct char.

input - abbaccdabba  k =3;
void lngSub(string s){
	int i=0;
	int j=0;
	vector<char>mp(26,0);
	while(j<=s.size()){
		mp[j]++;
		bool flag = true;
		for(int i=0;i<26;i++){
			if(mp[i]>k){
				flag = fasle;
				break;
			}
		}



	}	
}



















































